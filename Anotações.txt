Estrutura de Pastas do Laravel:

app = código que o framework vai usar (modelos, controllers, exceptions etc).
bootstrap = inicialização do Laravel.
config = arquivos de configuração específicos para a aplicação.
database = configurações de banco de dados.
lang = internacionalização do conteúdo.
public = a pasta acessível pelo servidor web.
resources = onde se guardam os recursos de Front End.
routes = configuração das rotas da aplicação.
storage = armazenamento de mídia de usuários (arquivos de upload etc).
tests = configurações de testes unitários.
vendor = bibliotecas instaladas pelo Composer/Laravel.

O código abaixo é gerado automaticamente pelo Composer. Serve para criptografar
dados ou fazer hash de senhas:

    > @php artisan key:generate --ansi

    INFO  Application key set successfully.

Para rodar a aplicação do Laravel, execute:
    php artisan serve
    ou 
    php artisan serve --port 80
    ou
    php artisan serve --host 0.0.0.0 --port 8000

No rodapé da página padrão são exibidas as versões do PHP e do Laravel em uso.

O arquivo routes/web.php contém as rotas para as views criadas pelo 
desenvolvedor. A sintaxe para as rotas é: 

    Route::metodoHttp('/URI precedida de barra', function() {
        return view('nome_da_view');
    });

Se houver algum erro no código gerenciado pelo Laravel, ele será exibido em
detalhes no navegador, para facilitar o debug.

Como uma rota pode chamar um método de um controlador:
    Route::metodoHttp('/rota', [ClasseDoController::class,'nome do metodo']);
    ou
    Route::metodoHttp('/rota', ['Namespace\NomeController','nome do metodo']);

O comando php artisan (sem outros parâmetros) lista os parâmetros que podem ser
usados pelo artisan. O comando a seguir cria um controlador:

    php artisan make:controller NomeController

Fornecendo o parâmetro --resources para o make:controller, o Controller é 
criado com alguns métodos que seguem a convenção do Laravel para métodos HTTP,
rotas e os nomes dos métodos. A seguir, um exemplo para o Controller Photo: 

    Verb        URI                     Action      Route Name
    GET         /photos                 index       photos.index
    GET         /photos/create	        create      photos.create
    POST        /photos	                store       photos.store
    GET         /photos/{photo}         show        photos.show
    GET         /photos/{photo}/edit    edit        photos.edit
    PUT/PATCH   /photos/{photo}         update      photos.update
    DELETE      /photos/{photo}         destroy     photos.destroy

A função response no Laravel acrescenta informações de cabeçalho e statuscode:
    public function index(Request request) {
        ...
        return response($resposta, 200, ['HeaderKey' => 'HeaderValue']);
    }

Métodos para redirecionar respostas no Laravel:
    public function index(){
        return response('', 302, ['Location' => 'http://www.google.com']);
    }

    ou

    public function index() {
        return redirect('http://www.google.com');
    }


O objeto de Request do Laravel nos dá várias formas de fazer a mesma coisa.

Por exemplo, para buscar um dado da query string, podemos usar o método get.
Porém nós também podemos utilizar o método query, obtendo o mesmo resultado.

A diferença entre o método get e o método query é que o método get busca o 
dado de qualquer lugar do nosso request, seja da query string ou mesmo de um 
campo enviado por post. Por isso o ideal é utilizar o método query para que 
nosso código fique mais explícito, deixando claro de onde vamos buscar o dado
(ou seja: "query" busca da query string, e "get" busca tanto dos parâmetros 
do método POST quanto da query string do método GET).

    Illuminate\Http\Request::get
        This method belongs to Symfony HttpFoundation and is not 
        usually needed when using Laravel.

    Illuminate\Http\Concerns\InteractsWithInput::query
        Retrieve a query string item from the request.
