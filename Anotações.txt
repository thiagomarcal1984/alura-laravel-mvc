Estrutura de Pastas do Laravel:

app = código que o framework vai usar (modelos, controllers, exceptions etc).
bootstrap = inicialização do Laravel.
config = arquivos de configuração específicos para a aplicação.
database = configurações de banco de dados.
lang = internacionalização do conteúdo.
public = a pasta acessível pelo servidor web.
resources = onde se guardam os recursos de Front End.
routes = configuração das rotas da aplicação.
storage = armazenamento de mídia de usuários (arquivos de upload etc).
tests = configurações de testes unitários.
vendor = bibliotecas instaladas pelo Composer/Laravel.

O código abaixo é gerado automaticamente pelo Composer. Serve para criptografar
dados ou fazer hash de senhas:

    > @php artisan key:generate --ansi

    INFO  Application key set successfully.

Para rodar a aplicação do Laravel, execute:
    php artisan serve
    ou 
    php artisan serve --port 80
    ou
    php artisan serve --host 0.0.0.0 --port 8000

No rodapé da página padrão são exibidas as versões do PHP e do Laravel em uso.

O arquivo routes/web.php contém as rotas para as views criadas pelo 
desenvolvedor. A sintaxe para as rotas é: 

    Route::metodoHttp('/URI precedida de barra', function() {
        return view('nome_da_view');
    });

Se houver algum erro no código gerenciado pelo Laravel, ele será exibido em
detalhes no navegador, para facilitar o debug.

Como uma rota pode chamar um método de um controlador:
    Route::metodoHttp('/rota', [ClasseDoController::class,'nome do metodo']);
    ou
    Route::metodoHttp('/rota', ['Namespace\NomeController','nome do metodo']);

O comando php artisan (sem outros parâmetros) lista os parâmetros que podem ser
usados pelo artisan. O comando a seguir cria um controlador:

    php artisan make:controller NomeController

Fornecendo o parâmetro --resources para o make:controller, o Controller é 
criado com alguns métodos que seguem a convenção do Laravel para métodos HTTP,
rotas e os nomes dos métodos. A seguir, um exemplo para o Controller Photo: 

    Verb        URI                     Action      Route Name
    GET         /photos                 index       photos.index
    GET         /photos/create	        create      photos.create
    POST        /photos	                store       photos.store
    GET         /photos/{photo}         show        photos.show
    GET         /photos/{photo}/edit    edit        photos.edit
    PUT/PATCH   /photos/{photo}         update      photos.update
    DELETE      /photos/{photo}         destroy     photos.destroy

A função response no Laravel acrescenta informações de cabeçalho e statuscode:
    public function index(Request request) {
        ...
        return response($resposta, 200, ['HeaderKey' => 'HeaderValue']);
    }

Métodos para redirecionar respostas no Laravel:
    public function index(){
        return response('', 302, ['Location' => 'http://www.google.com']);
    }

    ou

    public function index() {
        return redirect('http://www.google.com');
    }


O objeto de Request do Laravel nos dá várias formas de fazer a mesma coisa.

Por exemplo, para buscar um dado da query string, podemos usar o método get.
Porém nós também podemos utilizar o método query, obtendo o mesmo resultado.

A diferença entre o método get e o método query é que o método get busca o 
dado de qualquer lugar do nosso request, seja da query string ou mesmo de um 
campo enviado por post. Por isso o ideal é utilizar o método query para que 
nosso código fique mais explícito, deixando claro de onde vamos buscar o dado
(ou seja: "query" busca da query string, e "get" busca tanto dos parâmetros 
do método POST quanto da query string do método GET).

    Illuminate\Http\Request::get
        This method belongs to Symfony HttpFoundation and is not 
        usually needed when using Laravel.

    Illuminate\Http\Concerns\InteractsWithInput::query
        Retrieve a query string item from the request.

Separando o HTML do Controller.
Duas formas de associar um método a uma view no Laravel: 
    return view('listar-series', [
        'series' => $series // Array associativo.
    ]);

    ou

    return view('listar-series')
        ->with('series', $series); // Chamando o método "with" da view.

    ou

    return view('listar-series', 
        compact('series') // Um único elemento como parâmetro.
    );

    ou

    return view('listar-series', 
        compact(['series']) // Um array como parâmetro.
    );

A função compact recebe uma lista de strings e cria um array associativo em
que o índice corresponde ao nome da variável. Exemplo: 
    $array = compact('var1', 'var2');

        equivale a:

    $array = ['var1' => $var1, 'var2' => $var2];

Blade é um template engine usado pelo Laravel. 
    {{ }}   = Insere variáveis (igual ao Django).
    @       = Insere uma diretiva (seria igual a {% %} no Djnago).

A resposta do método view dos controllers do Laravel contém o método "with", 
que serve para inserir parâmetros na resposta. É uma maneira mais expressiva
de atribuir conteúdo às respostas.

Lembra das convenções dos nomes dos métodos/URI/rotas? Eles se aplicam também
às views do Laravel. Para garantir a separação, dentro da pasta resources/views
criamos uma pasta para cada controller, e nessa pasta criamos as views conforme
o nome do método. 

Exemplo para o controller Photo, com os métodos index, create, edit e show:
    resources\views\photo
        -> index.blade.php
        -> create.blade.php
        -> edit.blade.php
        -> show.blade.php

Essas views são suficientes porque os métodos PUT/PATCH, DELETE e POST não
demanda a criação de um HTML próprio.

Para referenciar as views no controller, use a mesma convenção de nomenclatura
no retorno do método view (nomeController.metodo):
    class Photo{
        public function index(Request $request)
        {
            return view('photo.index')->with('foo', 'bar');
        }
        public function create(Request $request)
        {
            return view('photo.create')->with('foo', 'bar');
        }
        public function edit(Request $request)
        {
            return view('photo.edit')->with('foo', 'bar');
        }
        public function show(Request $request)
        {
            return view('photo.show')->with('foo', 'bar');
        }
    }


O componente de layout padrão deve ficar no path resources\views\components.
Se o layout se chamasse "padrao", o caminho seria:
    resources\views\components\padrao.blade.php

O placeholder para os HTMLs que vai preencher o layout é a variável {{ $slot }}.

O arquivo de layout também pode ter outras variáveis, mas elas são fornecidas 
pelo HTML que vai preencher o layout (ver o exemplo da variável {{ $title }}),
não pelo controller.

Essa variável $title é fornecida em parâmetros do arquivo preenchedor, cujo 
HTML deve ser assim:
    <x-{arquivo-blade} variavel="Conteúdo" title="Título">
        ... restante do HTML ...
    </x-{arquivo-blade}>


Há um comando para criação de componentes no artisan:
    php artisan make:componente NomeDoComponente

Com isso, dois arquivos associados a NomeDoComponente são criados:
    app\View\Components\NomeDoComponente.php (para backend).
    resources\views\components\nome-do-componente.blade.php (para frontend).

Nós temos 2 tipos de componentes. Os componentes baseados em classes e os 
componentes anônimos. Componentes anônimos são os que possuem apenas um arquivo
de view, como o nosso caso do layout. Não é necessário criar uma classe para 
isso. Já os componentes baseados em classes possuem uma classe que pode 
manipular livremente os dados deste componente.

Criamos um componente baseado em classe com o comando make:component. Se 
quisermos criar um componente anônimo, como nosso layout, poderíamos executar:
    php artisan make:component layout –view. 
    
Como não há classe, podemos deixar o nome em minúsculo mesmo.

Caso a gente queira separar nosso componentes em pastas, por exemplo, 
forms/input.blade.php, podemos sem problemas. Na hora de utilizá-lo, vamos 
referenciá-lo como <x-forms.input>, usando o . como separador. Assim podemos 
manter nossos componentes organizados.

Há muito mais para aprender sobre componentes e caso você queira se 
aprofundar, pode conferir este link:

    https://laravel.com/docs/9.x/blade#components

Para escapar caracteres que poderiam ser usados em frameworks/bibliotecas de
JavaScript (ex.: {{ variavel }} ), coloque uma arroba antes do código:

    @{{ variavelJavaScript }}

Método do Laravel para converter um array para JSON:
    Js::from($array)
    
Link sobre XSS (Cross-Site Scripting):
    https://www.youtube.com/watch?v=lntsVxPZibw

Ideia: evitar que scripts maliciosos sejam executados. Para isso:
    1) Limpe a entrada;
    2) Escape a saída.

O arquivo package.json contém dependências baixáveis com o node/npm:
    npm install
    ou
    npm install package.json

As instalações dessas dependências ficam na pasta node_modules, (na raiz, e 
ela é ignorada pelo .gitignore).

A dependência que nos interessa é o Laravel Mix, que simplifica o uso de uma
ferramenta de controle de frontend chamada Webpack. 


Após o lançamento deste treinamento, ainda na versão 9 no Laravel, o Mix foi 
substituído por uma ferramenta chamada Vite. O propósito é muito parecido então 
vale a pena pesquisar sobre a migração depois, mas para continuarmos neste 
treinamento seguindo as etapas que foram realizadas no treinamento, vamos 
instalar o Mix (que continua sendo uma ferramenta válida e atual).

Para instalar o Laravel mix, execute:
    npm install laravel-mix --save-dev

Depois crie na raiz do projeto o arquivo webpack.mix.js com o conteúdo:
    const mix = require('laravel-mix');

Para executar corretamente o comando npm run dev e o mix ser executado, altere 
a linha "dev": "vite", para "dev": "mix",.

Isso deve ser o suficiente para você seguir usando o Mix como ferramenta para 
o front-end.

Repetindo, o Mix continua sendo uma ferramenta válida, mas o Laravel agora vem 
com o Vite instalado por padrão que funciona de uma forma relativamente 
semelhante. Quando você já estiver mais confortável com o framework e tudo 
estiver funcionando, pode tentar a migração do Mix para o Vite. 

Guia de migração: https://github.com/laravel/vite-plugin/blob/main/UPGRADE.md#migrating-from-laravel-mix-to-vite

O comando asset na tag link do arquivo layout.blade.php serve para flexibilizar
o servidor onde os arquivos estáticos serão servidos (pode ser local, ou de um
outro servidor de arquivos).

A pasta config tem os arquivos de configurações para várias coisas, tais como
bancos de dados, e-mail, logging, filas etc. Essas configurações geralmente
se baseiam em variáveis de ambiente.

Para definir o database usado pelo Laravel para sqlite, edite o arquivo .env,
inserindo a seguinte linha: 
    DB_CONNECTION=sqlite

O arquivo .env, na raiz da aplicação, é ignorado pelo .gitignore.

O arquivo .env.example é um exemplo de variáveis de ambiente com conteúdo 
falso, que facilitam a memorização dos parâmetros sem dizer quais são seus
valores reais.

Estrutura da pasta database:
    seeders = criadores de dados iniciais para a aplicação.
    factories = fábricas de dummy data.
    migrations = versiona o banco de dados.

Para criar uma migração no Laravel, use o comando:
    php artisan make:migration nome_da_migracao

No arquivo de migração gerado, podemos definir o que será escrito no database:

        $table->string('nome', 128)->unique(); 
        // Cria uma string chamada 'nome' com limite de 128 caracteres e única.

        $table->timestamps();
        // Cria duas colunas: created_at e updated_at.

Para aplicar as migrações, use o comando:
    php artisan migrate

Assim como no Django, o Laravel também usa CSRF tokens, inseridos assim:
    <form action="url" method="post">
        @csrf

        <label for ...>Rótulo</label>
        ...
        <button ...>Enviar</button>
    </form>

A fachada Illuminate\Support\Facades\DB serve para executar SQL.

O comando DB::insert exige uma string com o SQL e um array com os valores que
alimentarão os parâmetros da string com o SQL (nos pontos de interrogação).

O Laravel tem um comando para facilitar o debug: o dump and die (dd):
    dd($variavel);

A tela do navegador exibe na página uma estrutura para navegar no dump da
variável, o que é melhor do que fazer a leitura no console.

DB::select retorna um array de objetos, não um array de arrays associativos.
Então, se o retorno de DB::select fosse para a variável $var e buscássemos as
colunas nome e data_nascimento, nós acessaríamos assim:

    $nome = $var->nome;
    $data_nascimento = $var->data_nascimento;

    ... e não como:

    $nome = $var['nome'];
    $data_nascimento = $var['data_nascimento'];

Para criar uma classe de modelo no Laravel, use o comando:
    php artisan make:model NomeDoModelo

O modelo criado estende da classe Model do ORM PHP Eloquent.

Uma vez que o modelo for criado, podemos acessar o banco de dados com ele:
    $objeto = new NomeDoModelo(); // Cria o objeto.
    $objeto->nome = $request->input('nome'); // Atribui valores.
    $objeto->save(); // Persiste no database.

    NomeDoModelo::all(); // Busca todos os registros da tabela de NomeDoModelo.

Detalhe: usando os comandos de inserção, as colunas updated_at e created_at são
automaticamente atualizadas na inserção, sem a necessidade de o desenvolvedor 
inseri-las na sua lógica.

Vídeo sobre o padrão Active-Record (padrão usado no ORM Eloquent da Laravel):
    https://www.youtube.com/watch?v=WXLUYFC5jok

O vídeo fala sobre as duas abordagens para ORMs:
    1)  Active Record: As classes de modelo estendem de uma classe que contém
        métodos para a interação do banco de dados. A desvantagem é que as 
        classes de negócio ficam muito acopladas ao framework.

    2)  Data Mapper: Um Entity Manager busca as classes de modelo e realiza as
        operações de interação com o banco de dados. As responsabilidades ficam
        separadas: o modelo descreve o objeto de domínio, enquanto o Entity 
        Manager interage com o banco.
